# This file is used to build the release binaries for the Tauri GUI
name: "Publish GUI release to GitHub"

on:
  release:
    types: [created]

jobs:
  publish-tauri:
    # Do not publish preview releases to Github.
    # Building takes too long for preview releases.
    # if: ${{ !contains(github.ref_name, 'preview') }} Temporarily disabled
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-13" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-24.04" # We build on an older version to support older glib versions
            args: "--bundles deb,appimage"
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up environment variables
        uses: ./.github/actions/set-monero-env

      - uses: actionhippie/swap-space@v1
        if: matrix.platform == env.UBUNTU_PLATFORM_ID
        with:
          size: 15G

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@1.80
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Configure apt for retries (ubuntu only)
        if: matrix.platform == env.UBUNTU_PLATFORM_ID
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == env.UBUNTU_PLATFORM_ID # This must match the platform value defined above.
        run: |
          sudo apt update;
          sudo apt install -y ${{ env.DEPS_MONERO_LINUX }} ${{ env.DEPS_GUI_UBUNTU_SPECIFIC }} git
          
      - name: Get OpenSSL location
        if: matrix.platform == env.UBUNTU_PLATFORM_ID
        run: |
          which openssl
          openssl version
          echo "OPENSSL_PATH=$(which openssl)" >> $GITHUB_ENV

      - name: Install Monero build dependencies (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew update
          brew install ${{ env.DEPS_MONERO_MACOS }} git
          brew reinstall --build-from-source unbound expat  
          brew install protobuf@21

      - name: Install Monero build dependencies (Windows)
        if: matrix.platform == env.WINDOWS_PLATFORM_ID
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: ${{ env.DEPS_MONERO_WINDOWS_MSYS2 }} git

      - name: Clone submodules
        run: git submodule update --init --recursive

      - name: work around spurious network errors in curl 8.0
        shell: bash
        run: |
          echo "CARGO_HTTP_MULTIPLEXING=false" >> $GITHUB_ENV

      - name: install frontend dependencies
        working-directory: src-gui
        # Set the yarn network timeout to a high value to avoid spurious network errors
        run: yarn install --network-timeout 600000

      - name: install tauri-cli globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: tauri-cli@2.1.0
          
      - name: install typeshare-cli globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: typeshare-cli

      - name: install dprint globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: dprint@0.50.0

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD:  ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ github.event.release.id }}
          projectPath: src-tauri
          args: ${{ matrix.args }}
          tauriScript: cargo tauri

  flatpak-build:
    name: Build Flatpak + update repo
    needs: publish-tauri
    runs-on: ubuntu-latest
    container:
      # Image already contains flatpak, flatpak-builder and runtimes
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-47
      options: --privileged      # sandbox needs it
    permissions:
      contents: write            # to upload bundle to the release
      id-token: write            # for Pages deploy
      pages: write

    steps:
    - uses: actions/checkout@v4

    # 1. Download the .deb we just published on the release
    - name: Grab release asset
      run: |
        ASSET="UnstoppableSwap_${{ github.ref_name }}_amd64.deb"
        gh release download ${{ github.event.release.id }} --pattern "$ASSET"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 2. Update URL + SHA256 inside the manifest (yq = cleaner than sed)
    - name: Rewrite manifest for new version
      run: |
        SHA=$(sha256sum UnstoppableSwap_*.deb | cut -d' ' -f1)
        yq -i '
          .modules[0].sources[0].url = "https://github.com/UnstoppableSwap/core/releases/download/${{ github.ref_name }}/UnstoppableSwap_${{ github.ref_name }}_amd64.deb" |
          .modules[0].sources[0].sha256 = strenv(SHA)
        ' flatpak/net.unstoppableswap.gui.json

    # 3. Import signing key (one-liner GPG action)
    - uses: crazy-max/ghaction-import-gpg@v5
      id: gpg
      with:
        gpg_private_key: ${{ secrets.FLATPAK_GPG_PRIVATE_KEY }}
        passphrase:      ${{ secrets.FLATPAK_GPG_PASSPHRASE }}

    # 4. Build, export repo & one-click installer
    - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
      with:
        manifest-path: flatpak/net.unstoppableswap.gui.json
        arch: x86_64
        bundle: net.unstoppableswap.gui.flatpakref   # produces bundle + repo
        gpg-sign: ${{ steps.gpg.outputs.fingerprint }}
        build-bundle: true
        upload-artifact: false   # we'll attach manually below

    # 5. Attach bundle to the release so CLI users can "install --from"
    - name: Upload .flatpakref to release
      run: gh release upload ${{ github.event.release.id }} *.flatpakref --clobber
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 6. Stage repo for GitHub Pages
    #    flatpak-builder exported everything into "repo"
    - name: Prepare Pages artifact
      run: |
        mkdir -p public
        cp -a repo/* public
        # include the descriptor for GUI stores / CLI
        cp net.unstoppableswap.gui.flatpakref public/
      # Upload as Pages artifact
    - uses: actions/upload-pages-artifact@v2
      with:
        path: public

    # 7. Deploy to Pages
    - uses: actions/deploy-pages@v1

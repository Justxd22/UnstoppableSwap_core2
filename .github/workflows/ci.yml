name: CI

on:
  pull_request: # Need to run on pull-requests, otherwise PRs from forks don't run
  push:
    branches:
      - "master" # Always build head of master for the badge in the README

env:
  DEPS_MONERO_LINUX: 'build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libusb-1.0-0-dev libprotobuf-dev protobuf-compiler ccache git'
  DEPS_TAURI_LINUX: 'libwebkit2gtk-4.1-dev curl wget file libxdo-dev libayatana-appindicator3-dev librsvg2-dev' # build-essential & libssl-dev are in DEPS_MONERO_LINUX
  DEPS_MONERO_MACOS: 'cmake boost hidapi openssl zmq libpgm miniupnpc expat libunwind-headers protobuf ccache'
  DEPS_MONERO_WINDOWS_MSYS2: >-
    mingw-w64-x86_64-toolchain
    make
    mingw-w64-x86_64-cmake
    mingw-w64-x86_64-ccache
    mingw-w64-x86_64-boost
    mingw-w64-x86_64-openssl
    mingw-w64-x86_64-zeromq
    mingw-w64-x86_64-libsodium
    mingw-w64-x86_64-hidapi
    mingw-w64-x86_64-protobuf-c
    mingw-w64-x86_64-libusb
    mingw-w64-x86_64-unbound
    git
  APT_SET_CONF_COMMAND: |
    sudo tee -a /etc/apt/apt.conf.d/80-custom << EOF
    Acquire::Retries "3";
    Acquire::http::Timeout "120";
    Acquire::ftp::Timeout "120";
    EOF
  CCACHE_SETTINGS_COMMAND: |
    ccache --max-size=150M
    ccache --set-config=compression=true

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.80"
          components: clippy,rustfmt

      - uses: Swatinem/rust-cache@v2.7.3

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Setup ccache
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Check formatting
        uses: dprint/check@v2.2
        with:
          dprint-version: 0.39.1

      - name: Run clippy with default features
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Run clippy with all features enabled
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  bdk_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: Swatinem/rust-cache@v2.7.3

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Setup ccache
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Build swap
        run: cargo build --bin swap

      - name: Run BDK regression script
        run: ./swap/tests/bdk.sh

  sqlx_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: Swatinem/rust-cache@v2.7.3

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Setup ccache
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Install sqlx-cli
        run: cargo install --locked --version 0.6.3 sqlx-cli

      - name: Run sqlite_dev_setup.sh script
        run: |
          cd swap
          ./sqlite_dev_setup.sh

  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: Swatinem/rust-cache@v2.7.3

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.80"
          targets: armv7-unknown-linux-gnueabihf

      - name: Configure apt for retries
        if: matrix.os == 'ubuntu-latest'
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest' # This must match the platform value defined above.
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Install Monero build dependencies (macOS)
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew update
          brew install ${{ env.DEPS_MONERO_MACOS }}

      - name: Install Monero build dependencies (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: ${{ env.DEPS_MONERO_WINDOWS_MSYS2 }}

      - name: Setup ccache (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || startsWith(matrix.os, 'macos-')
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Setup ccache (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Build binary
        if: matrix.target != 'armv7-unknown-linux-gnueabihf'
        run: cargo build -p swap --target ${{ matrix.target }}

      - name: Install cross (armv7)
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: cargo install cross --locked

      - name: Build binary (armv7)
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: cross build -p swap --target ${{ matrix.target }}

      - name: Upload swap binary
        uses: actions/upload-artifact@v4
        with:
          name: swap-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/swap

      - name: Upload asb binary
        uses: actions/upload-artifact@v4
        with:
          name: asb-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/asb

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: (Free disk space on Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          # removing all of these takes ~10 mins, so just do as needed
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: false
          swap-storage: false
          tool-cache: false

      - name: Configure apt for retries
        if: matrix.os == 'ubuntu-latest'
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest' # This must match the platform value defined above.
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Install Monero build dependencies (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            cmake \
            libboost-all-dev \
            miniupnpc \
            libunbound-dev \
            graphviz \
            doxygen \
            libunwind8-dev \
            pkg-config \
            libssl-dev \
            libzmq3-dev \
            libsodium-dev \
            libhidapi-dev \
            libusb-1.0-0-dev \
            libprotobuf-dev \
            protobuf-compiler \
            ccache \
            git

      - name: Install Monero build dependencies (macOS)
        if: matrix.os == 'macos-latest' # Corrected to macos-latest
        run: |
          brew update
          brew install ${{ env.DEPS_MONERO_MACOS }}

      - name: Setup ccache (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: Swatinem/rust-cache@v2.7.3

      - name: Build tests
        run: cargo build --tests --workspace --all-features

      - name: Run monero-harness tests
        if: matrix.os == 'ubuntu-latest'
        run: cargo test --package monero-harness --all-features

      - name: Run library tests for swap
        run: cargo test --package swap --lib

  docker_tests:
    strategy:
      matrix:
        test_name:
          [
            happy_path,
            happy_path_restart_bob_after_xmr_locked,
            happy_path_restart_bob_before_xmr_locked,
            happy_path_restart_alice_after_xmr_locked,
            alice_and_bob_refund_using_cancel_and_refund_command,
            alice_and_bob_refund_using_cancel_then_refund_command,
            alice_and_bob_refund_using_cancel_and_refund_command_timelock_not_expired,
            alice_manually_punishes_after_bob_dead_and_bob_cancels,
            punish,
            alice_punishes_after_restart_bob_dead,
            alice_manually_punishes_after_bob_dead,
            alice_refunds_after_restart_bob_refunded,
            ensure_same_swap_id,
            concurrent_bobs_before_xmr_lock_proof_sent,
            concurrent_bobs_after_xmr_lock_proof_sent,
            alice_manually_redeems_after_enc_sig_learned,
            happy_path_bob_offline_while_alice_redeems_btc,
          ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: Swatinem/rust-cache@v2.7.3

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Setup ccache
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Run test ${{ matrix.test_name }}
        run: cargo test --package swap --test ${{ matrix.test_name }} -- --nocapture

  rpc_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: Swatinem/rust-cache@v2.7.3

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Setup ccache
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Run RPC server tests
        run: cargo test --package swap --test rpc -- --nocapture

  check_stable:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.1.7

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2.7.3

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Setup ccache
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Run cargo check on stable rust
        run: cargo check --all-targets

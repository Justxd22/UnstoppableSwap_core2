name: "Build swap and asb release binaries"

on:
  release:
    types: [created]

env:
  DOCKER_IMAGE_NAME: ghcr.io/unstoppableswap/asb
  DEPS_MONERO_LINUX: 'build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libusb-1.0-0-dev libprotobuf-dev protobuf-compiler ccache git'
  DEPS_TAURI_LINUX: 'libwebkit2gtk-4.1-dev curl wget file libxdo-dev libayatana-appindicator3-dev librsvg2-dev'
  DEPS_MONERO_MACOS: 'cmake boost hidapi openssl zmq libpgm miniupnpc expat libunwind-headers protobuf ccache'
  DEPS_MONERO_WINDOWS_MSYS2: >-
    mingw-w64-x86_64-toolchain
    make
    mingw-w64-x86_64-cmake
    mingw-w64-x86_64-ccache
    mingw-w64-x86_64-boost
    mingw-w64-x86_64-openssl
    mingw-w64-x86_64-zeromq
    mingw-w64-x86_64-libsodium
    mingw-w64-x86_64-hidapi
    mingw-w64-x86_64-protobuf-c
    mingw-w64-x86_64-libusb
    mingw-w64-x86_64-unbound
    git
  APT_SET_CONF_COMMAND: |
    sudo tee -a /etc/apt/apt.conf.d/80-custom << EOF
    Acquire::Retries "3";
    Acquire::http::Timeout "120";
    Acquire::ftp::Timeout "120";
    EOF
  CCACHE_SETTINGS_COMMAND: |
    ccache --max-size=150M
    ccache --set-config=compression=true

jobs:
  build_binaries:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - bin: swap
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: swap
            target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            archive_ext: tar
          - bin: swap
            target: x86_64-apple-darwin
            os: macos-13
            archive_ext: tar
          - bin: swap
            target: aarch64-apple-darwin
            os: macos-latest
            archive_ext: tar
          - bin: swap
            target: x86_64-pc-windows-msvc
            os: windows-latest
            archive_ext: zip
          - bin: asb
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: asb
            target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            archive_ext: tar
          - bin: asb
            target: x86_64-apple-darwin
            os: macos-13
            archive_ext: tar
          - bin: asb
            target: aarch64-apple-darwin
            os: macos-latest
            archive_ext: tar
          - bin: asb
            target: x86_64-pc-windows-msvc
            os: windows-latest
            archive_ext: zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout tagged commit
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.release.target_commitish }}
          token: ${{ secrets.BOTTY_GITHUB_TOKEN }}

      - uses: Swatinem/rust-cache@v2.7.3

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.80"

      - name: Configure apt for retries
        if: matrix.os == 'ubuntu-latest'
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Install Monero build dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install ${{ env.DEPS_MONERO_MACOS }}

      - name: Install Monero build dependencies (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: ${{ env.DEPS_MONERO_WINDOWS_MSYS2 }}

      - name: Setup ccache (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || startsWith(matrix.os, 'macos')
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Setup ccache (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Cross Build ${{ matrix.target }} ${{ matrix.bin }} binary
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          curl -L "https://github.com/cross-rs/cross/releases/download/v0.2.5/cross-x86_64-unknown-linux-gnu.tar.gz" | tar xzv
          sudo mv cross /usr/bin
          sudo mv cross-util /usr/bin
          cross build --target=${{ matrix.target }} --release --package swap --bin ${{ matrix.bin }}

      - name: Build ${{ matrix.target }} ${{ matrix.bin }} release binary
        if: matrix.target != 'armv7-unknown-linux-gnueabihf'
        run: cargo build --target=${{ matrix.target }} --release --package swap --bin ${{ matrix.bin }}

      - name: Smoke test the binary
        if: matrix.target != 'armv7-unknown-linux-gnueabihf'
        run: target/${{ matrix.target }}/release/${{ matrix.bin }} --help

      - id: create-archive-name
        shell: python
        run: |
          import platform
          os_info = platform.uname()

          arch = os_info.machine

          triple = "${{ matrix.target }}".split("-")
          arch = triple[0]

          archive_name=f'${{ matrix.bin }}_${{ github.event.release.tag_name }}_{os_info.system}_{arch}.${{ matrix.archive_ext }}'

          print(f'::set-output name=archive::{archive_name}')

      - name: Pack macos archive
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: gtar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack linux archive
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: tar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack windows archive
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.bin }}.exe ./${{ matrix.bin }}.exe
          7z a -tzip ${{ steps.create-archive-name.outputs.archive }} ./${{ matrix.bin }}.exe

      - name: Upload archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.create-archive-name.outputs.archive }}
          asset_name: ${{ steps.create-archive-name.outputs.archive }}
          asset_content_type: application/gzip

  build_and_push_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build_binaries
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Setup ccache
        run: ${{ env.CCACHE_SETTINGS_COMMAND }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker tags
        id: docker_tags
        run: |
          if [[ ${{ github.event.release.tag_name }} == "preview" ]]; then
            echo "preview=true" >> $GITHUB_OUTPUT
          else
            echo "preview=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
        if: steps.docker_tags.outputs.preview == 'false'

      - name: Build and push Docker image without latest tag (preview release)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
        if: steps.docker_tags.outputs.preview == 'true'

[package]
name = "swap"
version = "1.0.0-rc.13"
authors = [ "The COMIT guys <hello@comit.network>" ]
edition = "2021"
description = "XMR/BTC trustless atomic swaps."

[lib]
name = "swap"

[features]
tauri = [ "dep:tauri" ]

[dependencies]
anyhow = { workspace = true }
arti-client = { workspace = true, features = ["static-sqlite", "tokio", "rustls"] }
async-compression = { workspace = true, features = ["bzip2", "tokio"] }
async-trait = { workspace = true }
asynchronous-codec = { workspace = true }
atty = { workspace = true }
backoff = { workspace = true, features = ["tokio"] }
base64 = { workspace = true }
bdk = { workspace = true }
big-bytes = { workspace = true }
bitcoin = { workspace = true, features = ["rand", "serde"] }
bmrng = { workspace = true }
comfy-table = { workspace = true }
config = { workspace = true, features = ["toml"] }
conquer-once = { workspace = true }
curve25519-dalek = { package = "curve25519-dalek-ng", version = "4" }
data-encoding = { workspace = true }
dialoguer = { workspace = true }
directories-next = { workspace = true }
ecdsa_fun = { workspace = true, features = ["libsecp_compat", "serde", "adaptor"] }
ed25519-dalek = { workspace = true }
futures = { workspace = true }
hex = { workspace = true }
jsonrpsee = { workspace = true, features = ["server"] }
jsonrpsee-core = { workspace = true }
libp2p = { workspace = true, features = ["tcp", "yamux", "dns", "noise", "request-response", "ping", "rendezvous", "identify", "macros", "cbor", "json", "tokio", "serde", "rsa"] }
libp2p-community-tor = { workspace = true, features = ["listen-onion-service"] }
monero = { workspace = true, features = ["serde_support"] }
monero-rpc = { workspace = true }
once_cell = { workspace = true }
pem = { workspace = true }
proptest = { workspace = true }
qrcode = { workspace = true }
rand = "0.8"
rand_chacha = { workspace = true }
regex = { workspace = true }
reqwest = { workspace = true, features = ["http2", "rustls-tls", "stream", "socks"] }
rust_decimal = { workspace = true, features = ["serde-float"] }
rust_decimal_macros = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_cbor = { workspace = true }
serde_json = { workspace = true }
serde_with = { workspace = true, features = ["macros"] }
sha2 = { workspace = true }
sigma_fun = { workspace = true, features = ["ed25519", "serde", "secp256k1", "alloc"] }
sqlx = { workspace = true, features = ["sqlite", "runtime-tokio-rustls"] }
structopt = { workspace = true }
strum = { workspace = true, features = ["derive"] }
tauri = { workspace = true, features = ["config-json5"], optional = true }
thiserror = { workspace = true }
time = { workspace = true }
tokio = { workspace = true, features = ["rt-multi-thread", "time", "macros", "sync", "process", "fs", "net", "parking_lot"] }
tokio-tungstenite = { workspace = true, features = ["rustls-tls"] }
tokio-util = { workspace = true, features = ["io", "codec"] }
toml = { workspace = true }
tor-rtcompat = { workspace = true, features = ["tokio"] }
tower = { workspace = true, features = ["full"] }
tower-http = { workspace = true, features = ["full"] }
tracing = { workspace = true, features = ["attributes"] }
tracing-appender = { workspace = true }
tracing-subscriber = { workspace = true, features = ["fmt", "ansi", "env-filter", "time", "tracing-log", "json"] }
typeshare = { workspace = true }
unsigned-varint = { workspace = true, features = ["codec", "asynchronous_codec"] }
url = { workspace = true, features = ["serde"] }
uuid = { workspace = true, features = ["serde", "v4"] }
void = { workspace = true }

[target.'cfg(not(windows))'.dependencies]
tokio-tar = "0.3"

[target.'cfg(windows)'.dependencies]
zip = "0.5"

[dev-dependencies]
bitcoin-harness = { workspace = true }
get-port = { workspace = true }
jsonrpsee = { workspace = true, features = ["ws-client"] }
mockito = { workspace = true }
monero-harness = { workspace = true }
proptest = { workspace = true }
serde_cbor = { workspace = true }
serial_test = { workspace = true }
tempfile = { workspace = true }
testcontainers = { workspace = true }

[build-dependencies]
anyhow = { workspace = true }
vergen = { workspace = true, features = ["build", "git", "git2"] }
